rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isModerator() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isAuthenticated() && 
        userDoc != null && 
        userDoc.data.accountType == 'moderator';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isModerator() || isOwner(userId);
      allow delete: if isModerator();
    }

    // Sellers collection rules
    match /sellers/{sellerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == sellerId;
      allow update: if isModerator() || isOwner(sellerId);
      allow delete: if isModerator();
    }

    // Products collection rules
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/sellers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/sellers/$(request.auth.uid)).data.verificationStatus == 'approved';
      allow update, delete: if isAuthenticated() && 
        resource.data.sellerId == request.auth.uid;
    }

    // Orders collection rules
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid);
    }
  }
} 